use component Container, Input, Button, Icon
use controllers Auth, Accounts 

// main entry point for app
component main App {
    // defining state
    state EnableForm = true
    // mounted event
    @mounted accounts.load, FadeIn
    // child component
    MyForm { @EnableForm }
}

// conditional rendering
component ConditionalChild {
    state ShowText = false
    // Inline is supported
    if ShowText
    Text { "Hello world" @Moniker @bold }
}

component MyForm {
	prop EnableForm? boolean = true
    // components accept styles (FormContainerStyle)
    Container FormContainerStyle {  
        Input InputStyle {
            // component props can be passed with @ notation
            @email "Email Here"
            @value Auth.CREDS.email
            @disabled !EnableForm
            // Inline is supported
            Icon { @svg "email" @size 22 }
        }
        Input InputStyle {
            // boolean props are inferred for shorthand
            @password
            @value Auth.CREDS.password
            @disabled !EnableForm
            // keypress listeners 
            @key:enter MyButton.onPress()
        }
        // arrow syntax decalares a ref 
        Button->MyButton SubmitStyle {
            @text "Submit"
            @onPress Auth.CREDS.email
            if (waiting) Spinner SpinnerStyle {}
        }

        // Concept for switch case components
        MyComponent MyStyle {
            prop MyProp string = "JeffComponent"
            switch MyProp
                case "JeffComponent" 
                JeffComponent JeffStyle {
                    @someProp true
                }
                case "MemeComponent" 
                MemeComponent MemeStyle {}
        }
	}
}

style SubmitStyle {
    padding: 10 20, 
    center, 
    grow, 
    background: theme.background
}

style FormContainerStyle {
    margin: 5 mobile(0) tablet(3)
    maxWidth: 200
    shadow: 0, 0, 200 theme.shadow
    spaceBetween: 10
}

style InputStyle {
    padding: 10 5
    borderRadius: 5
    background: theme.inputBackground
}

animation FadeIn {
    @duration 200
    @frame opacity 0
    @frame opacity 1
}



// computed notEditing: boolean => !editing

// define global object AccountObject {
//     id: string
//     email: string
// }

// define global collection Accounts {
//     @groups define AUTHED, FAVORITES
//     @selectors define CURRENT
//     @data AccountObject
// }